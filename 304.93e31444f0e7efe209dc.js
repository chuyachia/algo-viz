"use strict";(self.webpackChunkalgo_viz=self.webpackChunkalgo_viz||[]).push([[159,304,742],{742:(e,t,n)=>{function s(){let e,t,n=0;this.addFirst=function(t){let s={value:t};s.next=e,e=s,n++},this.add=function(s){let i={value:s};null==e&&(e=i),null==t?t=i:(t.next=i,t=t.next),n++},this.peek=function(){return null!=e?e.value:void 0},this.poll=function(){const t=e;return e=e.next,n--,t.value},this.size=function(){return n}}n.r(t),n.d(t,{LinkedList:()=>s})},159:(e,t,n)=>{n.r(t),n.d(t,{Stack:()=>i});var s=n(742);function i(){let e=new s.LinkedList;this.push=function(t){e.addFirst(t)},this.pop=function(){return e.poll()},this.peek=function(){return e.peek()},this.size=function(){return e.size()}}},304:(e,t,n)=>{n.r(t);const s=new(n(159).Stack);test("push add to stack",(()=>{s.push("abc"),expect(s.peek()).toBe("abc"),expect(s.size()).toBe(1)})),test("stack works LIFO",(()=>{s.push("def"),expect(s.peek()).toBe("def"),expect(s.size()).toBe(2)})),test("pop removes from stack",(()=>{expect(s.pop()).toBe("def"),expect(s.size()).toBe(1),expect(s.pop()).toBe("abc"),expect(s.size()).toBe(0)}))}}]);