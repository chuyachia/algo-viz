(self.webpackChunkalgo_viz=self.webpackChunkalgo_viz||[]).push([[37,72,294,701,231,338],{72:(t,e,i)=>{"use strict";i.r(e),i.d(e,{Edge:()=>o});var s=i(314);function o(t,e,i,o,n){this.weight=t,this.from=e,this.to=i;let r=s.s7.r,h=s.s7.b,a=s.s7.g;this.display=function(){if(null!=this.from&&null!=this.to){var t=n.atan2(this.from.y-this.to.y,this.from.x-this.to.x);n.push(),n.stroke(r,a,h),n.strokeWeight(this.weight),n.line(this.from.x,this.from.y,this.to.x+o*n.cos(t),this.to.y+o*n.sin(t)),n.pop(),n.push(),n.translate(this.to.x,this.to.y),n.rotate(t-n.HALF_PI),n.stroke(r,a,h),n.fill(n.color(255,255,255)),n.triangle(0,o/2,o/4,o,-o/4,o),n.pop()}},this.changeColor=function(t){r=t.r,a=t.g,h=t.b}}},294:(t,e,i)=>{"use strict";i.r(e),i.d(e,{drawVertices:()=>o,getClosestVertex:()=>n});var s=i(231);function o(t,e,i,o,n,r,h){const a=[];let d=t.TWO_PI/e,l=0;for(let c=0;c<e;c++){let e=n*t.cos(l)+i/2,u=n*t.sin(l)+o/2;a.push(new s.Vertex(c,e,u,r,t,h)),l+=d}return a}function n(t,e){for(const i of e)if(t.dist(t.mouseX,t.mouseY,i.x,i.y)<20)return i}},701:(t,e,i)=>{"use strict";i.r(e),i.d(e,{GrowingEdge:()=>o});var s=i(314);function o(t,e,i){this.weight=1,this.increaseWeight=function(){this.weight+=1/i.deltaTime,this.weight=this.weight%10},this.display=function(){i.push(),i.stroke(s.s7.r,s.s7.g,s.s7.b),i.strokeWeight(this.weight),i.line(t,e,i.mouseX,i.mouseY),i.pop()}}},231:(t,e,i)=>{"use strict";i.r(e),i.d(e,{Vertex:()=>n});var s=i(314),o=i(72);function n(t,e,i,n,r,h){this.id=t,this.x=e,this.y=i,this.edges={},this.value,this.displayValue=h;let a=s.s7.r,d=s.s7.b,l=s.s7.g;this.display=function(){r.push(),r.strokeWeight(0),r.fill(r.color(a,d,l)),r.circle(this.x,this.y,n),r.fill(r.color(0,0,0)),r.textAlign(r.CENTER),r.text(this.id+" : "+this.displayValue,this.x,this.y+n),r.pop();for(const[t,e]of Object.entries(this.edges))e.display()},this.changeColor=function(t){a=t.r,l=t.g,d=t.b},this.getColor=function(){return{r:a,g:l,b:d}},this.addEdge=function(t,e){t.id!=this.id&&(this.edges[t.id]=new o.Edge(e,this,t,n,r))}}},338:(t,e,i)=>{"use strict";i.r(e),i.d(e,{dijkstraSolver:()=>r});var s=i(314);function o(t){let e=[];function i(t,i){var s=e[t];e[t]=e[i],e[i]=s}function s(t){return 2*t+1}function o(t){return 2*t+2}function n(t){return t%2==0?(t-2)/2:(t-1)/2}this.peek=function(){return e[0]},this.poll=function(){i(0,e.length-1);let n=e.pop();return function(n){let r=s(n),h=o(n);for(;r<e.length&&t(e[n],e[r])>0||h<e.length&&t(e[n],e[h])<0;)t(e[n],e[r])>0?(i(n,r),n=r):(i(n,h),n=h),r=s(n),h=o(n)}(0),n},this.add=function(s){e.push(s),function(s){let o=n(s);for(;s>0&&t(e[s],e[o])<0;)i(s,o),o=n(s=o)}(e.length-1)},this.size=function(){return e.length}}var n=i(982);function*r(t,e){const i=new Array(e),r=new Array(e);let h=(0,n.f)(50);const a=new o(((t,e)=>t[0]-e[0]));for(a.add([0,t]),i[t.id]=0,t.displayValue=0;a.size()>0;){let[t,e]=a.poll();if(!r[e.id]){for(r[e.id]=!0,e.changeColor(s.hM);!1===h.next().value;)yield;for(const[o,n]of Object.entries(e.edges)){let e=t+n.weight,o=n.to;for(n.changeColor(s.hM),o.changeColor(s.Ej),(void 0===i[o.id]||e<i[o.id])&&(i[o.id]=e,o.displayValue=e.toFixed(2),a.add([e,o]));!1===h.next().value;)yield;n.changeColor(s.s7)}e.changeColor(s.Ej)}}}},37:(t,e,i)=>{"use strict";i.r(e),i.d(e,{sketch:()=>h,explainText:()=>a});var s=i(314),o=i(294),n=i(701),r=i(338);function h(t){const e=30;let i,h,a,d,l,c=[],u=0;t.setup=function(){t.createCanvas(550,550),i=t.createButton(""),i.position(10,40),c=(0,o.drawVertices)(t,20,550,550,200,e,"Inf")},t.draw=function(){t.background(255,255,255),function(){switch(u){case 0:t.text("Click on nodes to add link. Keep mouse pressed to increase link weight.\nOnce the graph is done, click on the button to find shortest distance",10,10),i.html("Find shortest distance"),i.show(),i.mousePressed((function(){u=1}));break;case 1:t.text("Choose a start node to begin",10,10),i.hide();break;case 2:t.text("Finding shortest distance from node "+h.id,10,10);break;case 3:t.text("Shortest distance from node "+h.id+" found",10,10),i.show(),i.html("Restart"),i.mousePressed((function(){c=[],h=void 0,a=void 0,u=0,c=(0,o.drawVertices)(t,20,550,550,200,e,"Inf")}))}}(),t.push(),t.strokeWeight(0),t.fill(t.color(s.s7.r,s.s7.b,s.s7.g)),t.circle(e,520,e),t.fill(t.color(0,0,0)),t.textAlign(t.LEFT),t.text("ID : distance",60,520),t.fill(t.color(s.hM.r,s.hM.b,s.hM.g)),t.circle(e,490,e),t.text("Visiting",60,490),t.fill(t.color(s.Ej.r,s.Ej.b,s.Ej.g)),t.circle(e,460,e),t.text("Reachable",60,460),t.pop(),0===u?void 0!==d&&(t.mouseIsPressed&&d.increaseWeight(),d.display()):2===u&&a.next().done&&(u=3);for(const t of c)t.display()},t.mouseClicked=function(){1==u&&(h=(0,o.getClosestVertex)(t,c),void 0!==h&&(a=(0,r.dijkstraSolver)(h,20),u=2))},t.mouseReleased=function(){if(u>0)return;const e=(0,o.getClosestVertex)(t,c);if(void 0!==e)if(void 0===l)l=e,d=new n.GrowingEdge(l.x,l.y,t);else{let t=Math.round(1e3*d.weight)/1e3;l.addEdge(e,t),l=void 0,d=void 0}}}const a="<p>Dijkstra's algorithm finds the shortest distance from one node to all other nodes in graphs with non negative edges. It starts with a node, updates the distance to all its neighbors if the current distance to the neighbor is smaller than previously calculated distance. The current distance from a node to it's neighbor is the sum of the distance to the node and the weight of the edge leading to the neighbor.</p><p>Once all neighbors of a node are visited, the algorithm continues the same procedure with the node that is currently reachable with the shortest distance. Nodes that are already visited will not be revisited. Priority queue (binary heap) can be used to keep track of the reachable nodes and their distances. Head of the queue will have the current reachable node with the shortest distance.</p>"},314:(t,e,i)=>{"use strict";i.d(e,{hM:()=>s,Ej:()=>o,s7:()=>n});const s={r:254,g:160,b:144},o={r:89,g:199,b:235},n={r:154,g:160,b:167}},982:(t,e,i)=>{"use strict";function*s(t){for(;;){for(let e=0;e<t-1;e++)yield!1;yield!0}}i.d(e,{f:()=>s})}}]);