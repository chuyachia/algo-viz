(self.webpackChunkalgo_viz=self.webpackChunkalgo_viz||[]).push([[114,248],{248:(e,t,o)=>{"use strict";function i(e){let t={},o={},i=[],r=0;function n(o){let i=d(o);for(;void 0!==i&&e(t[o],t[i])<0;)u(o,i),i=d(o)}function s(o){let i=c(o),r=p(o);for(;void 0!==i;){let n=i;if(void 0!==r&&e(t[i],t[r])>0&&(n=r),e(t[o],t[n])<0)break;u(o,n),i=c(o),r=p(o)}}function u(e,t){var r=o[e],n=o[t];i[r]=t,i[n]=e,o[e]=n,o[t]=r}function c(e){var t=2*o[e]+1;return t<r&&t>=0?i[t]:void 0}function p(e){var t=2*o[e]+2;return t<r&&t>=0?i[t]:void 0}function d(e){var t,n=(t=o[e])%2==0?(t-2)/2:(t-1)/2;return n<r&&n>=0?i[n]:void 0}this.peek=function(){if(r<=0)throw new Error("Queue is empty");return t[i[0]]},this.poll=function(){if(r<=0)throw new Error("Queue is empty");let e=i[0],o=t[e];return this.remove(e),o},this.add=function(e,s){if(this.contains(e))throw new Error("Key already exists");t[e]=s,o[e]=r,i[r]=e,r++,n(e)},this.remove=function(e){if(!this.contains(e))throw new Error("Key does not exist");let c=i[r-1];u(e,c),delete t[e],o[e]=void 0,i[r-1]=void 0,r--,n(c),s(c)},this.update=function(e,o){if(!this.contains(e))throw new Error("Key does not exist");t[e]=o,n(e),s(e)},this.contains=function(e){return void 0!==o[e]},this.get=function(e){return t[e]},this.size=function(){return r}}o.r(t),o.d(t,{PriorityQueue:()=>i})},114:(e,t,o)=>{"use strict";o.r(t);const i=new(o(248).PriorityQueue)(((e,t)=>e-t));test("add item increase size",(()=>{i.add("a",2),i.add("c",3),i.add("b",1),expect(i.size()).toBe(3)})),test("peek returns min item",(()=>{expect(i.peek()).toBe(1)})),test("poll returns min item and remove from queue",(()=>{expect(i.poll()).toBe(1),expect(i.size()).toBe(2),expect(i.peek()).toBe(2)})),test("update value reorder queue",(()=>{i.update("a",4),expect(i.peek()).toBe(3)})),test("get returns expected values",(()=>{expect(i.get("a")).toBe(4),expect(i.get("c")).toBe(3)})),test("remove decrease queue size",(()=>{i.remove("a"),expect(i.size()).toBe(1),expect(i.get("c")).toBe(3),expect(i.get("a")).toBe(void 0),expect(i.peek()).toBe(3)})),test("poll alawys returns the min element",(()=>{i.add("a",5),i.add("b",4),i.add("d",6),i.add("e",1),expect(i.size()).toBe(5),expect(i.poll()).toBe(1),expect(i.poll()).toBe(3),expect(i.poll()).toBe(4),expect(i.poll()).toBe(5),expect(i.poll()).toBe(6)}))}}]);