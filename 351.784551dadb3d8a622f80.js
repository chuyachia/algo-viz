(self.webpackChunkalgo_viz=self.webpackChunkalgo_viz||[]).push([[351,72,231,338],{72:(t,e,i)=>{"use strict";i.r(e),i.d(e,{Edge:()=>r});var o=i(314);function r(t,e,i,r,s,d){this.weight=t,this.from=e,this.to=i;let n=o.s7.r,h=o.s7.b,a=o.s7.g;this.display=function(){null!=this.from&&null!=this.to&&(d?this.drawDirectedEdge():this.drawUndirectedEdge())},this.drawUndirectedEdge=function(){s.push(),s.stroke(n,a,h),s.strokeWeight(this.weight),s.line(this.from.x,this.from.y,this.to.x,this.to.y),s.pop()},this.drawDirectedEdge=function(){var t=s.atan2(this.from.y-this.to.y,this.from.x-this.to.x);s.push(),s.stroke(n,a,h),s.strokeWeight(this.weight),s.line(this.from.x,this.from.y,this.to.x,this.to.y),s.pop(),s.push(),s.stroke(n,a,h),s.fill(s.color(255,255,255)),s.translate(this.to.x,this.to.y),s.rotate(t-s.HALF_PI),s.triangle(0,r/2,r/4,r,-r/4,r),s.pop()},this.changeColor=function(t){n=t.r,a=t.g,h=t.b}}},231:(t,e,i)=>{"use strict";i.r(e),i.d(e,{Vertex:()=>s});var o=i(314),r=i(72);function s(t,e,i,s,d,n){this.id=t,this.x=e,this.y=i,this.edges=[],this.value,this.displayValue=n;let h=o.s7.r,a=o.s7.b,l=o.s7.g,c=0,f=new Set;this.display=function(){if(void 0===this.x||void 0===this.y)return;d.push(),d.stroke(h,a,l,80),d.strokeWeight(c),d.fill(h,a,l),d.circle(this.x,this.y,s),d.fill(0,0,0),d.strokeWeight(0);let t=this.displayValue.length>0?" : "+this.displayValue:"";d.textAlign(d.CENTER),d.text(this.id+t,this.x,this.y+s),d.pop()},this.displayEdges=function(){for(const t of this.edges)t.display()},this.changeColor=function(t){h=t.r,l=t.g,a=t.b},this.getColor=function(){return{r:h,g:l,b:a}},this.changeStrokeWeight=function(t){c=t},this.addEdge=function(t,e){t.id==this.id||f.has(t.id)||(f.add(t.id),this.edges.push(new r.Edge(e,this,t,s,d,!0)))}}},338:(t,e,i)=>{"use strict";i.r(e),i.d(e,{dijkstraSolver:()=>d});var o=i(314);function r(t){let e={},i={},o=[],r=0;function s(i){let o=l(i);for(;void 0!==o&&t(e[i],e[o])<0;)n(i,o),o=l(i)}function d(i){let o=h(i),r=a(i);for(;void 0!==o;){let s=o;if(void 0!==r&&t(e[o],e[r])>0&&(s=r),t(e[i],e[s])<0)break;n(i,s),o=h(i),r=a(i)}}function n(t,e){var r=i[t],s=i[e];o[r]=e,o[s]=t,i[t]=s,i[e]=r}function h(t){var e=2*i[t]+1;return e<r&&e>=0?o[e]:void 0}function a(t){var e=2*i[t]+2;return e<r&&e>=0?o[e]:void 0}function l(t){var e,s=(e=i[t])%2==0?(e-2)/2:(e-1)/2;return s<r&&s>=0?o[s]:void 0}this.peek=function(){if(r<=0)throw new Error("Queue is empty");return e[o[0]]},this.poll=function(){if(r<=0)throw new Error("Queue is empty");let t=o[0],i=e[t];return this.remove(t),i},this.add=function(t,d){if(this.contains(t))throw new Error("Key already exists");e[t]=d,i[t]=r,o[r]=t,r++,s(t)},this.remove=function(t){if(!this.contains(t))throw new Error("Key does not exist");let h=o[r-1];n(t,h),delete e[t],i[t]=void 0,o[r-1]=void 0,r--,s(h),d(h)},this.update=function(t,i){if(!this.contains(t))throw new Error("Key does not exist");e[t]=i,s(t),d(t)},this.contains=function(t){return void 0!==i[t]},this.get=function(t){return e[t]},this.size=function(){return r}}var s=i(982);function*d(t,e,i){const d=new Array(e),n=new Array(e),h=new Array(e),a=new r(((t,e)=>t[0]-e[0]));let l=(0,s.f)(i);for(t.changeStrokeWeight(5),a.add(t.id,[0,t]),d[t.id]=0,t.displayValue=d[t.id].toString();a.size()>0;){let[t,e]=a.poll();if(!h[e.id]){for(h[e.id]=!0,e.changeColor(o.hM);!1===l.next().value;)yield;for(const i of e.edges){let e=t+i.weight,r=i.to;if(!h[r.id]){for(i.changeColor(o.hM),r.changeColor(o.Ej),(void 0===d[r.id]||e<d[r.id])&&(d[r.id]=e,r.displayValue=d[r.id].toFixed(2),a.contains(r.id)?a.update(r.id,[e,r]):a.add(r.id,[e,r]),n[r.id]=i);!1===l.next().value;)yield;i.changeColor(o.s7)}}e.changeColor(o.Ej)}}for(let t of n)void 0!==t&&t.changeColor(o.Ej);return d}},351:(t,e,i)=>{"use strict";i.r(e),i(666);var o=i(231),r=i(338);test("Dijkstra finds shortest distance",(()=>{const t=new Array(6);for(let e=0;e<6;e++)t[e]=new o.Vertex(e);let e;for(t[0].addEdge(t[1],10),t[0].addEdge(t[2],15),t[1].addEdge(t[3],12),t[1].addEdge(t[5],15),t[2].addEdge(t[5],10),t[3].addEdge(t[4],1),t[3].addEdge(t[5],2),t[4].addEdge(t[5],5),e=(0,r.dijkstraSolver)(t[0],6,0).next();!e.done;);let i=e.value;expect(i[0]).toBe(0),expect(i[1]).toBe(10),expect(i[2]).toBe(15),expect(i[3]).toBe(22),expect(i[4]).toBe(23),expect(i[5]).toBe(24)})),test("Dijkstra finds shortest distance 2",(()=>{const t=new Array(5);for(let e=0;e<5;e++)t[e]=new o.Vertex(e);let e;for(t[0].addEdge(t[1],10),t[0].addEdge(t[4],3),t[1].addEdge(t[2],2),t[1].addEdge(t[4],4),t[2].addEdge(t[3],9),t[3].addEdge(t[2],7),t[4].addEdge(t[1],1),t[4].addEdge(t[2],8),t[4].addEdge(t[3],2),e=(0,r.dijkstraSolver)(t[0],5,0).next();!e.done;);let i=e.value;expect(i[0]).toBe(0),expect(i[1]).toBe(4),expect(i[2]).toBe(6),expect(i[3]).toBe(5),expect(i[4]).toBe(3)}))},314:(t,e,i)=>{"use strict";i.d(e,{hM:()=>o,Ej:()=>r,s7:()=>s});const o={r:254,g:160,b:144},r={r:89,g:199,b:235},s={r:154,g:160,b:167}},982:(t,e,i)=>{"use strict";function*o(t){for(;;){for(let e=0;e<t-1;e++)yield!1;yield!0}}i.d(e,{f:()=>o})}}]);